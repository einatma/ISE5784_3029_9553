package renderer;

import geometries.*;
import org.junit.jupiter.api.Test;
import primitives.*;
import renderer.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static primitives.Point.ZERO;

/**
 * Integration tests for camera ray generation and intersections with geometric shapes.
 */
public class CameraIntegrationTests {

    final String Error= "WRONG number of intersections";
    /**
     * Tests ray intersections with a sphere.
     */
    @Test
    public void testSphereIntegration() {
        Camera.Builder cameraBuilder1 = Camera.getBuilder()
                .setLocation(ZERO)
                .setDirection(new Vector(0, 0, -1), new Vector(0, -1, 0))
                .setVpDistance(1d)
                .setVpSize(3,3);

        Camera.Builder cameraBuilder2 = Camera.getBuilder()
                .setLocation(new Point(0,0,0.5))
                .setDirection(new Vector(0, 0, -1), new Vector(0, -1, 0))
                .setVpDistance(1d)
                .setVpSize(3,3);



        Sphere sphere = new Sphere(new Point(0, 0, -3), 1);
        //TC01: Sphere r=1 (2 intersections)
        assertEquals(2, countIntersections(cameraBuilder1, 3,3,
                new Sphere(new Point(0,0,-3),1d)), Error);

        //TC02: Sphere r=2.5 (18 intersections)
        assertEquals(18, countIntersections(cameraBuilder2, 3, 3,
                new Sphere(new Point(0,0,-2.5),2.5)),Error);

        //TC03: Sphere r=2 (10 intersections)
        assertEquals(10, countIntersections(cameraBuilder2, 3, 3,
                new Sphere(new Point(0,0,-2),2d)),Error);

        //TC04: Sphere r=4 (9 intersections)
        assertEquals(9, countIntersections(cameraBuilder2,3,3,
                new Sphere(new Point(0, 0, 1),4d)), Error);

        //TC05: Sphere r=0.5 (0 intersections)
        assertEquals(0, countIntersections(cameraBuilder1,3,3,
                new Sphere(new Point(0, 0, 1),0.5)), Error);
    }

    /**
     * Test method for
     * {@link Camera#constructRay(int, int, int, int)}
     * and {@link Plane#findIntersections(Ray)}.
     */
    @Test
    public void testPlaneIntegration() {
        Camera.Builder cameraBuilder = Camera.getBuilder()
                .setLocation(ZERO)
                .setDirection(new Vector(0, 0, 1), new Vector(0, -1, 0))
                .setVpDistance(1d)
                .setVpSize(3,3);

        //TC01: The plane parallel to the View Plane (9 intersections)
        assertEquals(9,countIntersections(cameraBuilder,3,3 ,new Plane(new Point(0, 0, 5),
                new Vector(0, 0, 1))),Error);

        //TC02: Diagonal plane to the View Plane (9 intersections)
        assertEquals(9,countIntersections(cameraBuilder,3,3, new Plane(new Point(0, 0, 5),
                new Vector(0, -1, 2))), Error);

        ////TC03: Diagonal plane with an obtuse angle to the View Plane (6 intersections)
        assertEquals(6, countIntersections(cameraBuilder, 3,3, new Plane(new Point(0,0,2),
                new Vector(1,1,1))), Error);

        // TC04:The plane behind the view plane (0 intersections)
        assertEquals(0, countIntersections(cameraBuilder, 3, 3, new Plane(new Point(0, 0, -4),
                new Vector(0,0,1))), Error);
    }

    /**
     * Test method for
     * {@link Camera#constructRay(int, int, int, int)}
     * and {@link Triangle#findIntersections(Ray)}.
     */
    @Test
    public void testTriangleIntegration() {
        Camera.Builder cameraBuilder = Camera.getBuilder()
                .setLocation(ZERO)
                .setDirection(new Vector(0, 0, -1), new Vector(0, -1, 0))
                .setVpDistance(1d)
                .setVpSize(3,3);

        //TC01: Small triangle (1 intersection)
        assertEquals(1, countIntersections(cameraBuilder,3,3,new Triangle(new Point(1, -1, -2),
                new Point(-1, -1, -2), new Point(0, 1, -2))),Error);

        //TC02: Large triangle (2 intersection)
        assertEquals(2, countIntersections(cameraBuilder,3,3,new Triangle(new Point(1, -1, -2),
                new Point(-1, -1, -2), new Point(0, 20, -2))),Error);
    }
    /**
     * Counts the intersections between rays generated by the camera and a given shape.
     *
     * @param shape the geometric shape to test for intersections
     * @return the total number of intersection points
     */
    private int countIntersections(Camera.Builder camera, int Nx, int Ny,Object shape) {
        int count = 0;
        for (int i = 0; i < Nx; i++) {
            for (int j = 0; j < Ny; j++) {
                Ray ray = camera.constructRay(3, 3, i, j);
                if (shape instanceof Sphere) {
                    count += ((Sphere) shape).findIntersections(ray).size();
                } else if (shape instanceof Plane) {
                    count += ((Plane) shape).findIntersections(ray).size();
                } else if (shape instanceof Triangle) {
                    count += ((Triangle) shape).findIntersections(ray).size();
                }
            }
        }
        return count;
    }
}